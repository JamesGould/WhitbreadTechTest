package util;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import cucumber.api.CucumberOptions;

import org.openqa.selenium.Capabilities;
import org.openqa.selenium.WebElement;
import io.appium.java_client.AppiumDriver;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;

public class AppiumUtil {
	
	public final static String DEVICE_NAME = "NEXUS_5X";
	public final static String PLATFORM_VERSION = "6.0";
	public final static String BROWSER_NAME = "";
	public final static String PLATFORM_NAME = "BROWSER";
	public final static String APP_PATH = "/Users/jamesgould/Desktop/app-debug.apk";
	public final static String BUNDLE_ID = "Cheesesquare";
	
	public static AppiumDriver driver;
	public static int IMPLICIT_TIME_SECONDS = 3;
	
	public void init()
	{
		DesiredCapabilities caps = DesiredCapabilities.android();
	}
	
	public static void startApp() throws MalformedURLException {		
		driver=new AndroidDriver(new URL("https://127.0.0.0:4723/wd/hub"), getDesiredCapabiltiesForAndroid());
	}
	
	private static Capabilities getDesiredCapabiltiesForAndroid() {
		DesiredCapabilities caps = DesiredCapabilities.android();
		caps.setCapability("deviceName", DEVICE_NAME);
		caps.setCapability("platformVersion", PLATFORM_VERSION);
		caps.setCapability("browserName", BROWSER_NAME);
		caps.setCapability("platformName", PLATFORM_NAME);
		caps.setCapability("app", "/Users/jamesgould/Library/Developer/Xcode/DerivedData/Perspecs-dgghtlkejxazouggetvbyuvrhuvg/Build/Products/Debug-iphonesimulator/Perspecs (Debug).app");
		caps.setCapability("bundleId", BUNDLE_ID);
		caps.setCapability("processArguments", "-testing");
		
		return caps;
	}
	
	public static Boolean checkElementDisplayed(AndroidElement element)
    {
    driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
        try 
        {
        	Boolean b = element.isDisplayed();
        	driver.manage().timeouts().implicitlyWait(IMPLICIT_TIME_SECONDS, TimeUnit.SECONDS);
        	return b;
        } 
        catch (Exception e) 
        {
        	driver.manage().timeouts().implicitlyWait(IMPLICIT_TIME_SECONDS, TimeUnit.SECONDS);
        	return false;
        }        
    }
	
	public static AndroidElement waitUntillTappable(AndroidElement element)
	{
		 WebDriverWait wait = new WebDriverWait(driver, 20);
		 wait.until(ExpectedConditions.elementToBeClickable(element));
		 return element;
	}
	
	public static void tap_button(AndroidElement region) {
		waitUntillTappable(region);
		driver.tap(1, region, 1);
	}
}